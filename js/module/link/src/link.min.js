/**
 * @fileOverview 脚本文件描述
 * @author thliu-pc
 * @version 3.4.1.0
 * @updateDate 2015/9/6
 */
define("module/link/src/link_dao", [ "jquery", "i18n", "lenovodata/util" ], function(require, exports, module) {
    var $ = require("jquery");
    var i18n = require("i18n");
    var _ = $.i18n.prop;
    var Util = require("lenovodata/util");
    var ROOT = "databox";
    var URL_PREFIX = Util.getApiVersion() + "/delivery";
    /*
     * @brief 创建外链，外链关联的内容为<root>/<path>指定的子树。
     * @param func 回调函数
     * @param path 文件的路径
     * @path_type 路径类型
     * @from 共享者的uid
     * @neid 元数据ID
     * @prefix_neid 当path_type为share_in/share_out的时候有效
     * @mode 权限，有效值为r、w、rw（默认）
     * @password    密码，默认没有密码
     * @expiration  有效期，单位为秒，默认4*3600
     * @description 外链说明
     * @return
     */
    exports.create = function(func, path, path_type, from, neid, prefix_neid, mode, password, expiration, description) {
        var uri = URL_PREFIX + "/create/" + ROOT + "/" + path;
        uri = uri.replace("//", "/");
        var postData = {
            mode: mode,
            password: password,
            expiration: expiration,
            description: description
        };
        if (neid) {
            postData.neid = neid;
        } else {
            postData.path_type = path_type;
            postData.from = from;
        }
        if (prefix_neid) {
            postData.prefix_neid = prefix_neid;
        }
        Util.ajax_json_post(uri, postData, function(xhr, textStatus) {
            var retVal = Util.ajax_json_process_normal_result(xhr, textStatus);
            func(retVal);
        });
    };
    /*
     * @brief 删除外链，外链关联的内容为<root>/<path>指定的子树。
     * @param func 回调函数
     * @param path 文件的路径
     * @return
     */
    exports.del = function(func, path) {
        var uri = URL_PREFIX + "/delete/" + ROOT + "/" + path;
        uri = uri.replace("//", "/");
        var postData = {};
        Util.ajax_json_post(uri, postData, function(xhr, textStatus) {
            var retVal = Util.ajax_json_process_normal_result(xhr, textStatus);
            func(retVal);
        });
    };
    /*
     * @brief 批量删除外链。
     * @param func 回调函数
     * @param codes
     * @return
     */
    exports.batch_del = function(func, codes) {
        var uri = URL_PREFIX + "/batch_delete/";
        var postData = {
            codes: codes
        };
        Util.ajax_json_post(uri, postData, function(xhr, textStatus) {
            var retVal = Util.ajax_json_process_normal_result(xhr, textStatus);
            func(retVal);
        });
    };
    /*
     * @brief 获取外链信息
     * @param func 回调函数
     * @param code
     * @return
     */
    exports.info = function(func, code) {
        var uri = URL_PREFIX + "/info/" + code;
        Util.ajax_json_get(uri, function(xhr, textStatus) {
            var retVal = Util.ajax_json_process_normal_result(xhr, textStatus);
            func(retVal);
        });
    };
    /*
     * @brief 外链认证
     * @param func 回调函数
     * @return
     */
    exports.auth = function(func, code, password) {
        var uri = URL_PREFIX + "/auth/" + code;
        var postData = {
            password: password
        };
        Util.ajax_json_post(uri, postData, function(xhr, textStatus) {
            var retVal = Util.ajax_json_process_normal_result(xhr, textStatus);
            func(retVal);
        });
    };
    /*
     * @brief 获取外链，列举当前用户的所有外链信息。
     * @param func 回调函数
     * @return
     */
    exports.list = function(func, include_expired) {
        var uri = URL_PREFIX + "/list";
        if (include_expired) {
            uri = uri + "?include_expired=true";
        } else {
            uri = uri + "?include_expired=false";
        }
        Util.ajax_json_get(uri, function(xhr, textStatus) {
            var retVal = Util.ajax_json_process_normal_result(xhr, textStatus);
            func(retVal);
        });
    };
    /*
     * @brief 获取外链文件/目录的元数据
     * @param func 回调函数
     * @param path 文件的路径
     * code  外链编码
     * relative_path 要查看的内容相对于外链的路径信息
     * token 令牌
     * @return
     */
    exports.metadata = function(func, code, relative_path, token, order_type, sort, offset, limit) {
        if (!code) {
            return {
                code: 999,
                data: null,
                message: _("code不能为空!")
            };
        }
        var uri = URL_PREFIX + "/metadata/" + code;
        if (relative_path) {
            uri += "/" + relative_path;
        }
        var queryString = [];
        if (token) {
            queryString.push("token=" + token);
        }
        if (order_type) {
            queryString.push("orderby=" + order_type);
        }
        if (sort) {
            queryString.push("sort=" + sort);
        }
        if (offset != undefined) {
            queryString.push("offset=" + offset);
        }
        if (limit) {
            queryString.push("limit=" + limit);
        }
        if (queryString.length > 0) {
            uri += "?" + queryString.join("&");
        }
        uri = uri.replace("//", "/");
        Util.ajax_json_get(uri, function(xhr, textStatus) {
            var retVal = Util.ajax_json_process_normal_result(xhr, textStatus);
            func(retVal);
        });
    };
    /*
     * @brief 发送邮件通知
     * @param func 回调函数
     * @param link 外链
     * @param emails
     * @param message 消息
     * @param isfolder 外链是否是文件夹
     * @param name 文件名/文件夹名
     * @param path 路径
     * @return
     */
    exports.sendmail = function(func, link, emails, message, isfolder, name, path) {
        var uri = "/mail/sendlink/";
        var postData = {
            link: link,
            email: emails,
            message: message,
            isfolder: isfolder,
            name: name,
            path: path
        };
        Util.ajax_json_post(uri, postData, function(xhr, textStatus) {
            var retVal = Util.ajax_json_process_normal_result(xhr, textStatus);
            func(retVal);
        });
    };
    exports.batch_transfer = function(func, delivery_code, from_pathes, to_path, password) {
        var uri = URL_PREFIX + "/transfer/" + delivery_code;
        var data = JSON.stringify({
            from: from_pathes,
            to: to_path
        });
        var post_data = {
            json: data
        };
        if (password) {
            post_data.password = password;
        }
        Util.ajax_json_post(uri, post_data, function(xhr, textStatus) {
            var retVal = Util.ajax_json_process_batch_result(xhr, textStatus, _("文件转存成功"));
            func(retVal);
        });
    };
    /*
     *查询用户邮箱列表
     *param key 关键字
     * 
     * */
    exports.getUserEmailList = function(func, key, offset, limit) {
        var uri = Util.getApiVersion() + "/user/search?query=" + key + "&offset=" + offset + "&limit=" + limit + "&pattern=head&type=email";
        Util.ajax_json_get_nowait(uri, function(xhr, textStatus) {
            var retVal = Util.ajax_json_process_normal_result(xhr, textStatus);
            func(retVal);
        });
    };
});

define("js/module/link/src/link_mail", [ "jquery", "Clipboard", "jquery-copy", "placeholder", "tips", "util", "underscore", "module/link/src/link_dao" ], function(require, exports, module) {
    //依赖
    require("jquery");
    require("Clipboard");
    require("jquery-copy");
    require("placeholder");
    language = $.i18n.prop;
    var Tips = require("tips"), Util = require("util"), underscore = require("underscore"), linkDao = require("module/link/src/link_dao");
    window.language = $.i18n.prop;
    function linkMail(self) {
        this.self = self;
        this.options = self.options;
        this.link_creator = self.options.creator;
        this.link_url = self.options.url;
        this.link_password = self.options.password;
        this.mail_description = "";
        this.link_isfolder = self.options.isfolder;
        this.link_filename = self.options.name;
        this.link_path = self.options.path;
        this.link_expiration = self.options.expiration;
        this.mails = [];
        //正确的邮箱地址都保存在这个数组中
        this.mailsWidth = 0;
        //邮箱输入框宽度
        this.searchScrollTimes = 0;
    }
    linkMail.prototype = {
        init: function() {
            var self = this;
            var link_transfer_addr = document.getElementById("link_transfer_addr"), link_share_password = document.getElementById("link_share_password"), link_share_creator = document.getElementById("link_share_creator"), link_share_filename = document.getElementById("link_share_filename"), link_share_expireTime = document.getElementById("link_share_expireTime"), link_mail_instruction = document.getElementById("link_mail_instruction"), addr_input = document.getElementById("addr_input"), historyList = document.querySelector("#link_mail_query ul#historyList"), queryList = document.querySelector("#link_mail_query ul#queryList"), history_head = document.querySelector("#link_mail_query #history_head");
            this.render();
            this.events();
        },
        events: function() {
            var self = this;
            var addr = document.getElementById("addr"), link_mail_send = document.getElementById("link_email_send"), link_mail_query = document.getElementById("link_mail_query"), link_email_cancel = document.getElementById("link_email_cancel");
            //当获取焦点时，搜索框中出现最近5条历史纪录和所有的用户邮箱,不用focus是有其他考虑
            $(addr_input).on("click", function(e) {
                queryList.innerHTML = "";
                self.searchScrollTimes = 0;
                self.historyList();
                linkDao.getUserEmailList(function(res) {
                    if (res.data.length) {
                        self.queryList(res.data.length, res.data);
                        link_mail_query.style.display = "block";
                    }
                }, this.value, 0, 10);
                //点击某个地址可以删除
                $("#addr span.addr i").on("click", function(e) {
                    var cancelIndex = self.mails.indexOf(this.parentNode.innerText);
                    self.mails.splice(cancelIndex, 1);
                    self.removeMailAddr(this);
                });
                //搜索框滚动到最后时再向后台请求数据
                $(link_mail_query).on("scroll", function(e) {
                    var n = self.searchScrollTimes + 1;
                    var scrollTop = $(this).scrollTop();
                    //滚动高度
                    var scrollHeight = $(this)[0].scrollHeight;
                    var viewHeight = $(this).height();
                    if (scrollHeight - scrollTop - viewHeight <= 30) {
                        var curInuptVal = $(this).parent().find("input").val();
                        linkDao.getUserEmailList(function(res) {
                            if (res.data.length) {
                                self.queryList(res.data.length, res.data);
                                self.searchScrollTimes++;
                            } else {
                                $(link_mail_query).off("scroll");
                            }
                        }, curInuptVal, n * 10, 10);
                    }
                });
            });
            //按下分号或逗号键时 生成当前邮箱地址
            $(addr_input).on("keyup", function(e) {
                if (e.keyCode == 188 || e.keyCode == 186 || e.keyCode == 32) {
                    //去除分号、逗号还有空格
                    var lastChar = this.value.charAt(this.value.length - 1);
                    if (lastChar == ";" || lastChar == "," || lastChar == " ") {
                        this.value = this.value.substring(0, this.value.length - 1);
                        this.value = $.trim(this.value);
                    }
                    if (this.value != "") {
                        self.createMailAddr(this.value);
                        self.changeMailInput();
                    }
                }
            }).on("blur", function(e) {
                if (this.value != "" && e.target.nodeName != "INPUT") {
                    self.createMailAddr(this.value);
                    self.changeMailInput();
                } else {
                    $(link_mail_query).hide();
                }
            });
            //结束
            //搜索		
            $(addr_input).on("keyup", function(e) {
                var queryInterval = this.value;
                setTimeout(function() {
                    queryList.innerHTML = "";
                    if (queryInterval == addr_input.value) {
                        link_mail_query.style.display = "none";
                        history_head.style.display = "none";
                        historyList.style.display = "none";
                        var offset = 0, limit = 10;
                        //offset为分页偏移量，limit为最多显示数；
                        linkDao.getUserEmailList(function(res) {
                            if (res.data.length) {
                                link_mail_query.style.display = "block";
                                self.queryList(res.data.length, res.data);
                            }
                        }, addr_input.value, offset, limit);
                    }
                }, 500);
            });
            //结束
            //退格键删除前面的地址
            $(addr_input).on("keydown", function(e) {
                if (e.keyCode == 8 && this.value == "") {
                    $(this).prev().find("i").trigger("click");
                }
            });
            //
            //鼠标移出搜索框时隐藏
            $(link_mail_query).on("mouseleave", function(e) {
                this.style.display = "none";
            });
            //结束
            //点击“发送邮件”时
            $(link_mail_send).on("click", function() {
                this.innerHTML = _("发送中...");
                var sendMails = self.mails.join(";");
                var currentInputValue = $.trim(addr_input.value);
                if (currentInputValue != "") {
                    if (Util.validEmail(currentInputValue)) {
                        sendMails = sendMails + currentInputValue;
                    } else {
                        self.createMailAddr(currentInputValue);
                        self.changeMailInput();
                        this.innerHTML = _("发送");
                        return;
                    }
                }
                if (sendMails == "" && addr_input.value == "") {
                    Tips.show(_("邮箱不能为空"));
                    this.innerHTML = _("发送");
                    return;
                }
                self.mail_description = link_mail_instruction.value;
                $(link_mail_send).css({
                    cursor: "pointer",
                    "background-color": "#2A7EF8",
                    "border-color": "#2872dd",
                    color: "#ffffff"
                });
                linkDao.sendmail(function(ret) {
                    link_mail_send.innerHTML = _("发送");
                    if (ret.code == 200 && ret.data.code == 200) {
                        Tips.show(_("发送成功"), 3e3);
                        //发送成功后关闭设置框
                        $(".i-close").trigger("click");
                    } else {
                        Tips.show(_("发送失败，请重新发送"));
                    }
                    //将发送成功的邮件地址写进cookie
                    self.addMailCookies(sendMails.split(";"));
                }, self.link_url, sendMails, self.mail_description, self.link_isfolder, self.link_filename, self.link_path);
            });
            $("#addr span.addr i").on("click", function(e) {
                self.removeMailAddr(this.parentNode);
                self.changeMailInput();
            });
            //清空历史纪录
            $("#remove_all").on("click", function() {
                history_head.style.display = "none";
                historyList.style.display = "none";
                Util.removeCookie("querymails");
            });
            //点击取消按钮关闭设置框
            $(link_email_cancel).on("click", function(e) {
                $(".i-close").trigger("click");
            });
        },
        render: function() {
            var views = underscore.template($("#link_tmp_mail").html());
            var html = views(this.options);
            $("#link_mail_wrapper").html(html);
            $("input, textarea").placeholder();
            link_share_creator.innerHTML = LenovoData.user.user_info.user_name;
            link_share_filename.innerHTML = this.link_filename;
        },
        //创建邮件地址栏中的邮件地址
        createMailAddr: function(text) {
            var self = this;
            var span = document.createElement("span"), i = document.createElement("i");
            var innerText = document.createTextNode(text);
            span.setAttribute("class", "addr");
            i.setAttribute("class", "cancel");
            if (!Util.validEmail(addr_input.value)) {
                span.className += " error";
                i.className += " error";
                Tips.show(_("以下标红的邮箱格式不正确，检查一下吧"), 3e3);
            }
            addr_input.value = "";
            addr_input.placeholder = "";
            //先不管格式对错，将地址放进邮件地址数组里；
            this.mails.push(text);
            span.appendChild(innerText);
            span.appendChild(i);
            addr.insertBefore(span, addr_input);
            //      	//点击某个地址可以删除
            //
            $("#addr span.addr i").off("click").on("click", function(e) {
                self.removeMailAddr(this.parentNode);
                self.changeMailInput();
            });
        },
        //删除邮件地址栏中的地址以及邮件数组中的数据
        removeMailAddr: function(removeEle) {
            var self = this;
            var cancelIndex = self.mails.indexOf(removeEle.innerText);
            self.mails.splice(cancelIndex, 1);
            removeEle.parentNode.removeChild(removeEle);
        },
        //在查询下拉框中显示查询结果列表
        queryList: function(nums, res) {
            var self = this;
            var li = document.createElement("li");
            for (var i = 0; i < nums; i++) {
                li.innerHTML += "<input type='checkbox' /><span class='query_mail'>" + res[i].email + "</span><br>";
            }
            queryList.appendChild(li);
            $(queryList).find("input").off("click").on("click", function() {
                if (this.checked) {
                    addr_input.value = this.nextSibling.innerHTML;
                    self.createMailAddr(addr_input.value);
                    self.changeMailInput();
                    addr_input.innerHTML = "";
                } else {
                    for (var i = 0; i < addr.children.length; i++) {
                        if (addr.childNodes[i].innerText == this.nextSibling.innerHTML) {
                            self.removeMailAddr(addr.childNodes[i]);
                            self.changeMailInput();
                            break;
                        }
                    }
                    this.checked = false;
                }
            });
        },
        //在查询下拉框中显示历史纪录列表
        historyList: function() {
            var self = this;
            if (Util.getCookie("querymails")) {
                historyList.innerHTML = "";
                history_head.style.display = "block";
                historyList.style.display = "block";
                var querymails_arr = Util.getCookie("querymails").split("&");
                var li = document.createElement("li");
                for (var i = 0; i < querymails_arr.length; i++) {
                    li.innerHTML += "<input type='checkbox' /><span class='history_mail'>" + querymails_arr[i] + "</span><br>";
                }
                historyList.appendChild(li);
                $(historyList).find("input").on("click", function() {
                    if (this.checked) {
                        addr_input.value = this.nextSibling.innerHTML;
                        self.createMailAddr(addr_input.value);
                        self.changeMailInput();
                    } else {
                        for (var i = 0; i < addr.children.length; i++) {
                            if (addr.childNodes[i].innerText == this.nextSibling.innerHTML) {
                                self.removeMailAddr(addr.childNodes[i]);
                                self.changeMailInput();
                                break;
                            }
                        }
                        this.checked = false;
                    }
                });
            }
        },
        //发送的邮件地址写进cookie里，每次显示最近5条历史纪录
        addMailCookies: function(mail_arr) {
            //cookie里始终只保存5条
            if (Util.getCookie("querymails")) {
                var mailcookies = Util.getCookie("querymails").split("&");
                var new_mail_arr = mailcookies.concat(mail_arr);
                //去重
                new_mail_arr = new_mail_arr.uniqueBack();
                if (new_mail_arr.length > 5) {
                    var newMailCookies = new_mail_arr.slice(-5).join("&");
                    Util.setCookie("querymails", newMailCookies, 365);
                } else {
                    var newMailCookies = new_mail_arr.join("&");
                    Util.setCookie("querymails", newMailCookies, 365);
                }
            } else {
                //去重
                mail_arr = mail_arr.uniqueBack();
                if (mail_arr.length > 5) {
                    var mailVlues = mail_arr.slice(-5).join("&");
                    Util.setCookie("querymails", mailVlues, 365);
                } else {
                    var mailVlues = mail_arr.join("&");
                    Util.setCookie("querymails", mailVlues, 365);
                }
            }
        },
        //邮箱输入框的大小变化
        changeMailInput: function() {
            if (addr_input.previousSibling) {
                this.mailsWidth += addr_input.previousSibling.clientWidth;
            } else {
                this.mailsWidth = 0;
                addr_input.style.width = "100%";
                addr_input.placeholder = _("点击或输入邮箱地址，多个地址以逗号或分号分隔");
            }
            if (this.mailsWidth < 430) {
                addr_input.style.width = link_transfer_addr.clientWidth - this.mailsWidth - 20 + "px";
            } else {
                //				addr_input.style.width=link_transfer_addr.clientWidth-addr_input.previousSibling.clientWidth-20+"px";
                addr_input.style.width = 120 + "px";
            }
        }
    };
    module.exports = linkMail;
});

define("js/module/link/src/link_main", [ "underscore", "js/module/link/src/link_share", "js/module/link/src/link_mail","css/theme/default/calendar.css","js/module/link/css/link.css"], function(require, exports, module) {
    //依赖
    require("css/theme/default/calendar.css");
    require("js/module/link/css/link.css");
    var underscore = require("underscore");
    var share = require("js/module/link/src/link_share");
    var mail = require("js/module/link/src/link_mail");
    //dom
    var $link_tab = {};
    var $link_body_wrapper = {};
    function linkMain(options) {
        this.options = options;
        this.baseurl = options.baseurl;
        this.wrapper = options.wrapper;
    }
    linkMain.prototype = {
        init: function() {
            var self = this;
            this.wrapper.load(g_origin + "/js/module/link/link_main.html?" + new Date().getTime(), function() {
                self.render();
                self.share = new share(self.options);
                self.share.init();
                self.events();
            });
        },
        events: function() {
            var self = this;
            $link_tab.delegate("li", "click", function() {
                self.setTab(this);
                if ($(this).index() == 1) {
                    self.share.saveLinkSet();
                    new mail(self).init();
                }
            });
        },
        render: function() {
            this.wrapper.parent().find(".title-wraper").css({
                border: "none"
            });
            $link_tab = $("#link_tab");
            $link_body_wrapper = $("#link_body_wrapper");
            var tmp = underscore.template($("#link_tmp_tab").html());
            $link_tab.html(tmp());
        },
        //tab标签
        setTab: function(e) {
            var $this = $(e);
            $this.parent().find("li").removeClass("link_selected");
            $this.addClass("link_selected");
            $link_body_wrapper.find(".link_content").hide().eq($this.index()).show();
        },
        //析构函数，资源回收
        destory: function() {
            this.share.destory();
        }
    };
    module.exports = linkMain;
});

define("js/module/link/src/link_share", [ "jquery", "calendar", "Clipboard", "util", "tips", "module/link/src/link_dao", "underscore" ], function(require, exports, module) {
    //依赖
    require("jquery");
    require("calendar");
    require("Clipboard");
    var Util = require("util");
    var Tips = require("tips");
    var linkDao = require("module/link/src/link_dao");
    var underscore = require("underscore");
    window.language = $.i18n.prop;
    //dom
    var $link_share;
    var $link_tmp;
    var $link_txt_expiration = -1;
    var $link_password;
    var $link_desc;
    var $link_copy;
    var $link_chk_expiration;
    //复制
    var objClip;
    function linkShare(options) {
        this.options = options;
    }
    linkShare.prototype = {
        init: function() {
            var self = this;
            $link_share = $("#link_share_wrapper");
            $link_tmp = $("#link_tmp_share");
            this.render({
                rendered: function() {
                    $link_txt_expiration = $("#link_txt_expiration");
                    $link_password = $("#link_password");
                    $link_desc = $("#link_desc");
                    $link_copy = $("#link_copy");
                    $link_chk_expiration = $("#link_chk_expiration");
                    $link_upload = $("#link_upload");
                    $link_download = $("#link_download");
                    $link_preview = $("#link_preview");
                    self.events();
                }
            });
        },
        events: function() {
            var self = this;
            $link_share.delegate("input", "click", function(e) {
                var cmd = $(e.target).attr("name");
                switch (cmd) {
                  case "copy":
                    self.setCopyAndSave(e);
                    break;

                  case "code":
                    self.setTwoDimensionCode(e);
                    break;

                  case "show":
                    self.setShow(e);
                    break;

                  case "chk_expiration":
                    self.setExpiration(e);
                    break;

                  //密码开启
                    case "password":
                    self.setPassword(this);
                    break;

                  case "linkAuth":
                    self.checkAuth(this);
                    break;
                }
                self.updateSaveBtn();
            });
            //密码
            $link_password.keyup(function() {
                var strPwd = $(this).val();
                var $errMsg = $(this).parent().find(".link_err_msg");
                self.updateSaveBtn();
                if ($.trim(strPwd) == "") {
                    $link_share.find(".link_txt_password").text("");
                    $errMsg.text(_("密码不能为空"));
                    return;
                }
                $errMsg.empty();
                $link_share.find(".link_txt_password").text("(" + _("密码：") + strPwd + ")");
                self.updateClipboard();
            });
            //设置日期
            self.calendar = $link_txt_expiration.calendar({
                calendarOffset: {
                    x: 139,
                    y: 3
                },
                selectableDateRange: [ {
                    from: new Date(),
                    to: new Date(9999, 1, 1)
                } ],
                onClick: function(el, cell, date, data) {
                    el.val(Util.formatDate(date, "yyyy-MM-dd"));
                    self.setExpiration(el);
                }
            });
            //复制完成
            objClip.on("complete", function(client, args) {
                self.setCopyAndSave();
            });
            //外链说明focus out 保存
            $link_desc.focusout(function() {
                self.saveLinkSet();
            });
            $link_share.find(".link_date").on("click", function(e) {
                $link_txt_expiration.trigger("click");
                e.stopPropagation();
            });
            //解决日历无法正常隐藏的问题
            var $gldp = $link_share.find("div[gldp-el='link_gldp']");
            $gldp.bind("click", function(e) {
                e.stopPropagation();
                return;
            });
            $(document).unbind("click").bind("click", function(e) {
                if (e.target.id == "link_txt_expiration") {
                    return;
                }
                if ($gldp.is(":visible")) {
                    $gldp.hide();
                }
            });
        },
        render: function(params) {
            var self = this;
            var create = function(ret) {
                var views = underscore.template($link_tmp.html());
                self.setAuth(ret.data);
                ret.data["expirationDays"] = "-";
                if (ret.data["expiration"] != -1) {
                    //外链已过期
                    var exp = new Date(self.options.expiration.substr(0, 10).replace(/\-/g, "/"));
                    var now = new Date(new Date().getFullYear() + "/" + (new Date().getMonth() + 1) + "/" + new Date().getDate());
                    ret.data["expiration"] = Util.formatDate(ret.data.expiration, "yyyy-MM-dd");
                    ret.data["expirationDays"] = Util.GetDateDiff(Util.formatDate(new Date(), "yyyy-MM-dd"), ret.data["expiration"], "day");
                }
                $.extend(self.options, ret.data);
                self.options["uploadCheck"] = /^(rwp|rw|wp|w)$/.test(self.options.mode);
                self.options["downloadCheck"] = /^(rwp|rw|rp|r)$/.test(self.options.mode);
                self.options["previewCheck"] = /^(rwp|rp|wp|pw|p)$/.test(self.options.mode);
                if (self.options.action) {}
                var html = views(self.options);
                $link_share.html(html);
                //若已过期，在日期后面显示出来
                var distance = parseInt((exp - now) / 1e3 / 3600 / 24);
                if (distance < 0) {
                    var $link_em_days = $("#link_em_days");
                    var $errMsg = $link_em_days.next(".link_err_msg").text(_("外链已过期"));
                    $link_em_days.hide();
                    $("#link_copy").css({
                        "background-color": "#88b7f1",
                        "border-color": "#88b7f1"
                    });
                }
                //复制swf初始化,待复制的数据从 link_copy 的属性中读取
                objClip = new ZeroClipboard(document.getElementById("link_copy"), {
                    moviePath: "/js/gallery/ZeroClipboard/ZeroClipboard.swf"
                });
                params.rendered && params.rendered.call(self);
            };
            //外链信息已经存在
            if (this.options.deliveryCode) {
                linkDao.info(function(ret) {
                    if (ret.code != 200) {
                        Tips.warn(ret.message);
                        return;
                    }
                    $.extend(self.options, ret.data);
                    create(ret);
                }, this.options.deliveryCode);
            } else {
                self.setAuth(self.options);
                self.saveLinkSet(function(ret) {
                    create(ret);
                }, true);
            }
        },
        //设置访问权限
        setAuth: function(data) {
            var self = this;
            data["upload"] = Util.getPrivatePrivilege(self.options.cssAction || self.options.action).canUpload;
            data["download"] = Util.getPrivatePrivilege(self.options.cssAction || self.options.action).canDownload;
            data["preview"] = Util.getPrivatePrivilege(self.options.cssAction || self.options.action).canPreview;
        },
        //拷贝
        setCopyAndSave: function(e) {
            var self = this;
            this.saveLinkSet(function() {
                Tips.show(_("链接地址已经复制到剪切板中"));
                $link_copy.val(_("复制"));
                if (self.savedCallback) {
                    self.savedCallback();
                }
            });
        },
        //更新剪贴板
        updateClipboard: function() {
            var strTxt = $link_share.find(".link_url_span").text().replace(/\s/g, "");
            $("#link_copy").attr("data-clipboard-text", strTxt);
        },
        //更新保存按钮样式
        updateSaveBtn: function() {
            var isDisabled = this.checkInput();
            if (isDisabled) {
                $link_copy.removeAttr("disabled");
                $link_copy.css({
                    background: "#2A7EF8"
                });
                $link_copy.css({
                    "border-color": "#1d64d0"
                });
            } else {
                $link_copy.css({
                    background: "#88b7f1"
                });
                $link_copy.css({
                    "border-color": "#88b7f1"
                });
                $link_copy.attr("disabled", "true");
            }
            $link_copy.val(_("保存设置并复制"));
        },
        //验证数据
        checkInput: function() {
            //上传，下载，预览
            var len = $link_share.find("input[name='linkAuth']:checked");
            if (!len.length) {
                return false;
            }
            //密码
            var $link_password_show = $("#link_password_show");
            if ($link_password_show[0].checked && $.trim($link_password.val()) == "") {
                return false;
            }
            //日期
            if ($link_chk_expiration[0].checked && $.trim($link_txt_expiration.val()) == "") {
                return false;
            } else {
                var exp = new Date($link_txt_expiration.val().replace(/\-/g, "/"));
                var now = new Date(new Date().getFullYear() + "/" + (new Date().getMonth() + 1) + "/" + new Date().getDate());
                if (exp < now) {}
            }
            if (Util.getBytes($link_desc.val()) > 600) {
                Tips.warn(_("外链说明：最多可以输入300个汉字"));
                return false;
            }
            return true;
        },
        //外链设置
        saveLinkSet: function(fn, isFirst) {
            var self = this;
            if (!isFirst && !this.checkInput()) {
                return false;
            }
            var mode = "";
            var password = "";
            var description = $link_desc ? $link_desc.val() : "";
            var expiration = -1;
            var upload, download, preview;
            //首次创建
            if (isFirst) {
                if (self.options.cssAction && Util.getPrivatePrivilege(self.options.cssAction).canDownload) {
                    mode += "r";
                }
                if (self.options.isfolder && self.options.cssAction && Util.getPrivatePrivilege(self.options.cssAction).canUpload) {
                    mode += "w";
                }
                if (self.options.cssAction && Util.getPrivatePrivilege(self.options.cssAction).canPreview) {
                    mode += "p";
                }
            } else {
                if ($link_upload[0]) {
                    upload = $link_upload[0].checked;
                }
                if ($link_download[0]) {
                    download = $link_download[0].checked;
                }
                if ($link_preview[0]) {
                    preview = $link_preview[0].checked;
                }
                password = $.trim($link_password.val());
                if ($link_chk_expiration[0].checked) {
                    var re = /([\d]{4})\D+?([\d]{1,2})\D+?([\d]{1,2})?/;
                    expiration = $link_txt_expiration.val();
                    var matchArr = re.exec(expiration);
                    expiration = matchArr[1] + "-" + matchArr[2] + "-" + matchArr[3];
                }
                if (upload && download && preview) {
                    mode = "rwp";
                } else if (upload && download) {
                    mode = "rw";
                } else if (upload && preview) {
                    mode = "wp";
                } else if (download && preview) {
                    mode = "rp";
                } else if (upload) {
                    mode = "w";
                } else if (download) {
                    mode = "r";
                } else if (preview) {
                    mode = "p";
                }
            }
            $.extend(self.options, {
                password: password,
                expiration: expiration,
                description: description
            });
            linkDao.create(function(ret) {
                if (ret.code != 200) {
                    Tips.warn(ret.message);
                    return;
                }
                $.extend(self.options, ret.data);
                if (fn) fn(ret);
            }, self.options.path, self.options.path_type, self.options.from, self.options.neid, self.options.prefix_neid, mode, password, expiration, description);
        },
        //查看
        setShow: function(e) {
            window.open($(e.target).attr("data-clipboard-text"));
        },
        //验证外链权限
        checkAuth: function(e) {
            var len = $link_share.find("input[name='linkAuth']:checked").length;
            var $errMsg = $(e).parent().find(".link_err_msg");
            if (!len) {
                $errMsg.text(_("请至少选择一种权限"));
            } else {
                $errMsg.empty();
            }
        },
        //设置密码
        setPassword: function(e) {
            var self = this;
            var $chk = $("#link_password_show");
            var $pwdContext = $("#link_pwd_context");
            if ($chk[0].checked) {
                $link_password.val(self.createPassword(4));
                $pwdContext.show();
            } else {
                $link_password.val("");
                $pwdContext.hide();
            }
            $link_password.trigger("keyup");
            self.updateClipboard();
        },
        //创建随机密码
        createPassword: function(len) {
            var seed = new Array("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z");
            var lenSeed = seed.length;
            var str = "";
            for (var i = 0; i < len; i++) {
                var j = Math.floor(Math.random() * lenSeed);
                str += seed[j];
            }
            return str;
        },
        //设置有效期
        setExpiration: function(e) {
            var $chk = $("#link_chk_expiration");
            var $context = $("#link_exp_context");
            if ($chk[0].checked) {
                $context.show();
                if (!$.trim($link_txt_expiration.val())) {
                    $link_txt_expiration.val(Util.formatDate(new Date(), "yyyy-MM-dd"));
                }
                var days = Util.GetDateDiff(Util.formatDate(new Date(), "yyyy-MM-dd"), $link_txt_expiration.val(), "day");
                $("#link_em_days").text(language("距离到期还有{0}天", days)).show().next().hide();
            } else {
                $context.hide();
            }
        },
        //析构函数，资源回收
        destory: function() {
            $link_share.find("*").unbind();
            $link_share = null;
            $link_tmp = null;
            $link_txt_expiration = -1;
            $link_desc = null;
            $link_copy = null;
            $link_chk_expiration = null;
            if (ZeroClipboard) {}
        }
    };
    module.exports = linkShare;
});
